---
import './_style-dropdown.css'

import Layout from '../layouts/Layout.astro';
import FilterZone from './_filters-zone.astro';
import FilterGroup from './_filters-group.astro';
import BtnMoreFilters from './_btn-more-filters.astro';
import SidebarMoreFilters from './_sidebar-more-filters.astro';
---

<Layout>
	<SidebarMoreFilters />
	
	<div class="card">
        <div class="card-body">
            <form>
				<div class="nav-dropdownFilter">
					<label class="search">
						<input type="search" name="" class="form-control search" placeholder="Search...">
					</label>

					<section class="wrapper-slider-dropdownFilter" data-wrapper="dropdownFilter">
						<button class="btn btn-prev" type="button" data-btn-slider="prev">
							<i class="bi bi-chevron-left"></i>
						</button>

						<div class="container-slider-filter" data-container="slider">
							<FilterZone />
							<FilterGroup />
							<FilterGroup />
							<FilterGroup />
							<FilterGroup />
							<FilterGroup />
							<FilterGroup />
						</div>

						<button class="btn btn-next" type="button" data-btn-slider="next">
							<i class="bi bi-chevron-right"></i>
						</button>
					</section> 

					<BtnMoreFilters />
				</div>
			</form>
		</div>
	</div>
</Layout>

<script is:inline>
    $('.dropdown-toggle').dropdown({
        boundary: 'viewport'
    });

    function initDropdownFilters(wrapperSelector) {
        $(wrapperSelector).find('.dropdown.dropdownFilter').each(function () {
            let dropdown = $(this);
            let container = dropdown.find('.dropdown-menu');
            let button = dropdown.find('button');

            // Função para atualizar os valores e estado do botão
            function updateCheckedValues() {
                let checkedValues = container.find('[data-item="checkbox"]:checked').map(function () {
                    return $(this).val();
                }).get();

                console.log(`Dropdown "${button.text()}":`, checkedValues);

                // Adiciona ou remove a classe 'active' no botão
                if (checkedValues.length > 0) {
                    button.addClass('active');
                } else {
                    button.removeClass('active');
                }
            }

            // Impede que o dropdown feche ao clicar nos labels ou inputs
            container.find('[data-item="dropdownFilter"]').on("click", function(e) {
                if (e.target.tagName.toLowerCase() === "input") return;
                e.stopPropagation();
            });

            // Busca em tempo real, só se existir
            container.find('.dropdown-search').on('input', function () {
                let search = $(this).val().toLowerCase();
                container.find('[data-item="dropdownFilter"]').each(function () {
                    let text = $(this).text().toLowerCase();
                    $(this).toggle(text.includes(search));
                });
            });

            // Checkboxes individuais (excluindo "Todos")
            container.find('[data-item="checkbox"]').not('.parent-all').on("change", function () {
                updateCheckedValues();
            });

            // Checkbox "Todos"
            container.find('.parent-all').each(function () {
                let parent = $(this);
                let group = parent.data('group');

                // Ao clicar em "Todos"
                parent.change(function () {
                    container.find(group).prop('checked', parent.prop('checked'));
                    updateCheckedValues();
                });

                // Quando qualquer filho muda, atualiza o "Todos" sem log duplicado
                container.find(group).change(function () {
                    parent.prop(
                        'checked',
                        container.find(group + ":checked").length === container.find(group).length
                    );
                    updateCheckedValues(); // atualiza botão mesmo se checkboxes já marcados
                });
            });

            // Inicializa o estado do botão ao carregar, refletindo checkboxes já marcados
            updateCheckedValues();
        });
    }

    $(document).ready(function() {
        initDropdownFilters('[data-wrapper="dropdownFilter"]');
    });
</script>

<script is:inline>
	$(function(){
		const slider = $('[data-container="slider"]');
		const btnPrev = $('[data-btn-slider="prev"]');
		const btnNext = $('[data-btn-slider="next"]');
		const step = 250;
		const speed = 1;

		function updateButtons() {
			const scrollLeft  = slider.scrollLeft();
			const scrollWidth = slider[0].scrollWidth;
			const clientWidth = slider[0].clientWidth;

			scrollLeft <= 0 ? btnPrev.addClass("invisible") : btnPrev.removeClass("invisible");
			scrollLeft + clientWidth >= scrollWidth ? btnNext.addClass("invisible") : btnNext.removeClass("invisible");
		}

		btnNext.on("click", function(){
			slider.animate({ scrollLeft: "+=" + step }, speed, updateButtons);
		});
		btnPrev.on("click", function(){
			slider.animate({ scrollLeft: "-=" + step }, speed, updateButtons);
		});
		
		// Atualiza no load e no scroll manual
		slider.on("scroll", updateButtons);
		updateButtons();
	});
</script>